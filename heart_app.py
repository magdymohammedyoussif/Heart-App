# -*- coding: utf-8 -*-
"""heart_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11aEuOz8-fIrwmjhxhQMemxxTixqkWoHc
"""

# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

# Page configuration
st.set_page_config(page_title="Heart Disease Predictor", page_icon="❤️", layout="wide")
sns.set(style='whitegrid')

# Load and preprocess data
@st.cache_data
def load_data():
    try:
        df = pd.read_csv('heart.csv')

        # Remove outliers
        def remove_outliers_IQR(_df, columns):
            for col in columns:
                Q1 = _df[col].quantile(0.25)
                Q3 = _df[col].quantile(0.75)
                IQR = Q3 - Q1
                _df = _df[~((_df[col] < (Q1 - 1.5 * IQR)) | (_df[col] > (Q3 + 1.5 * IQR)))]
            return _df

        outlier_cols = ['RestingBP', 'Cholesterol', 'MaxHR', 'Oldpeak']
        df = remove_outliers_IQR(df, outlier_cols)
        return df
    except FileNotFoundError:
        st.error("Please upload 'heart.csv' file")
        return None

# Main app
def main():
    st.title("❤️ Heart Disease Prediction App")
    df = load_data()
    if df is None: return

    # Initialize session state
    if 'trained' not in st.session_state:
        st.session_state.trained = False

    # Sidebar controls
    st.sidebar.header("Model Configuration")
    test_size = st.sidebar.slider("Test Size", 0.1, 0.5, 0.2)
    selected_model = st.sidebar.selectbox("Select Model", [
        "Logistic Regression", "K-NN", "SVM", "Kernel SVM",
        "Naive Bayes", "Decision Tree", "Random Forest"
    ])

    # Data exploration section
    st.header("Data Exploration")

    col1, col2 = st.columns(2)
    with col1:
        st.write("**Dataset Overview**")
        st.dataframe(df.head())

    with col2:
        st.write("**Basic Statistics**")
        st.dataframe(df.describe())

    # Visualization expanders
    with st.expander("Data Distribution Visualizations"):
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.countplot(x='HeartDisease', data=df, palette=["#CD5C5C","#BDB76B"], ax=ax)
        ax.set_title("Heart Disease Distribution")
        st.pyplot(fig)

        col1, col2 = st.columns(2)
        with col1:
            fig = plt.figure(figsize=(10, 6))
            sns.countplot(x='Sex', data=df, palette=['pink','brown'])
            plt.title('Gender Distribution')
            st.pyplot(fig)

        with col2:
            fig = plt.figure(figsize=(10, 6))
            sns.boxplot(data=df[['Age', 'RestingBP', 'Cholesterol', 'MaxHR', 'Oldpeak']])
            plt.title('Numerical Features Distribution')
            st.pyplot(fig)

    # Model training section
    st.header("Model Training")

    if st.button("Train All Models"):
        with st.spinner("Training models..."):
            # Encode categorical features
            categorical_cols = ['Sex', 'ChestPainType', 'RestingECG', 'ExerciseAngina', 'ST_Slope']
            encoders = {}
            for col in categorical_cols:
                le = LabelEncoder()
                df[col] = le.fit_transform(df[col])
                encoders[col] = le
                joblib.dump(le, f'{col}_encoder.joblib')

            # Split data
            X = df.drop('HeartDisease', axis=1)
            y = df['HeartDisease']
            X_train, X_test, y_train, y_test = train_test_split(
                X, y, test_size=test_size, random_state=42
            )
            joblib.dump(X_test, 'X_test.joblib')  # Save X_test
            joblib.dump(y_test, 'y_test.joblib')  # Save y_test
            joblib.dump(X_train, 'X_train.joblib')  # Save X_train
            joblib.dump(y_train, 'y_train.joblib')  # Save y_train
            joblib.dump(encoders, 'encoders.joblib')
            joblib.dump(df, 'df.joblib')
            joblib.dump(test_size, 'test_size.joblib')
            joblib.dump(selected_model, 'selected_model.joblib')
            joblib.dump(categorical_cols, 'categorical_cols.joblib')
            joblib.dump(df.columns, 'columns.joblib')
            joblib.dump(df.dtypes, 'dtypes.joblib')
            joblib.dump(df.shape, 'shape.joblib')
            joblib.dump(df.info(), 'info.joblib')
            joblib.dump(df.isnull().sum(), 'null_sum.joblib')
            joblib.dump(df.duplicated().sum(), 'dup_sum.joblib')
            joblib.dump(df.corr(), 'corr.joblib')


            # Scale features
            scaler = StandardScaler()
            X_train = scaler.fit_transform(X_train)
            X_test = scaler.transform(X_test)
            joblib.dump(scaler, 'scaler.joblib')

            # Initialize models
            models = {
                "Logistic Regression": LogisticRegression(random_state=44),
                "K-NN": KNeighborsClassifier(n_neighbors=5),
                "SVM": SVC(kernel='linear', random_state=44),
                "Kernel SVM": SVC(kernel='rbf', random_state=44),
                "Naive Bayes": GaussianNB(),
                "Decision Tree": DecisionTreeClassifier(criterion='entropy', random_state=44),
                "Random Forest": RandomForestClassifier(n_estimators=10, criterion='entropy', random_state=44)
            }

            # Train and evaluate models
            results = {}
            for name, model in models.items():
                model.fit(X_train, y_train)
                y_pred = model.predict(X_test)
                accuracy = accuracy_score(y_test, y_pred)
                joblib.dump(model, f'{name.replace(" ", "_")}_model.joblib')
                results[name] = accuracy

            st.session_state.results = results
            st.session_state.trained = True
            st.success("All models trained successfully!")

    # Show results if trained
    if st.session_state.trained:
        st.subheader("Model Performance")
        col1, col2 = st.columns(2)

        with col1:
            st.write("**Accuracy Scores**")
            results_df = pd.DataFrame.from_dict(
                st.session_state.results,
                orient='index',
                columns=['Accuracy']
            ).sort_values(by='Accuracy', ascending=False)
            st.dataframe(results_df.style.format({'Accuracy': '{:.2%}'}))

        with col2:
            model = joblib.load(f'{selected_model.replace(" ", "_")}_model.joblib')
            X_test = joblib.load('X_test.joblib')
            y_test = joblib.load('y_test.joblib')
            y_pred = model.predict(X_test)

            st.write(f"**Confusion Matrix for {selected_model}**")
            fig, ax = plt.subplots(figsize=(6,6))
            sns.heatmap(confusion_matrix(y_test, y_pred),
                        annot=True, fmt='d', cmap='Blues', ax=ax)
            ax.set_xlabel('Predicted')
            ax.set_ylabel('Actual')
            st.pyplot(fig)

    # Prediction section
    st.header("Heart Disease Prediction")

    with st.form("prediction_form"):
        col1, col2, col3 = st.columns(3)

        with col1:
            age = st.number_input("Age", min_value=20, max_value=100, value=50)
            sex = st.selectbox("Sex", ['M', 'F'])
            chest_pain = st.selectbox("Chest Pain Type", ['TA', 'ATA', 'NAP', 'ASY'])
            resting_bp = st.number_input("Resting BP (mm Hg)", min_value=80, max_value=200, value=120)

        with col2:
            cholesterol = st.number_input("Cholesterol (mm/dl)", min_value=0, max_value=600, value=200)
            fasting_bs = st.selectbox("Fasting BS > 120 mg/dl", [0, 1])
            resting_ecg = st.selectbox("Resting ECG", ['Normal', 'ST', 'LVH'])
            max_hr = st.number_input("Max HR", min_value=60, max_value=202, value=150)

        with col3:
            exercise_angina = st.selectbox("Exercise Angina", ['Y', 'N'])
            oldpeak = st.number_input("Oldpeak", min_value=0.0, max_value=6.2, value=1.0)
            st_slope = st.selectbox("ST Slope", ['Up', 'Flat', 'Down'])

        submitted = st.form_submit_button("Predict")

    if submitted:
        try:
            # Load encoders and scaler
            encoders = {}
            categorical_cols = ['Sex', 'ChestPainType', 'RestingECG', 'ExerciseAngina', 'ST_Slope']
            for col in categorical_cols:
                encoders[col] = joblib.load(f'{col}_encoder.joblib')

            scaler = joblib.load('scaler.joblib')
            model = joblib.load(f'{selected_model.replace(" ", "_")}_model.joblib')

            # Encode input
            input_data = {
                'Age': [age],
                'Sex': encoders['Sex'].transform([sex])[0],
                'ChestPainType': encoders['ChestPainType'].transform([chest_pain])[0],
                'RestingBP': [resting_bp],
                'Cholesterol': [cholesterol],
                'FastingBS': [fasting_bs],
                'RestingECG': encoders['RestingECG'].transform([resting_ecg])[0],
                'MaxHR': [max_hr],
                'ExerciseAngina': encoders['ExerciseAngina'].transform([exercise_angina])[0],
                'Oldpeak': [oldpeak],
                'ST_Slope': encoders['ST_Slope'].transform([st_slope])[0]
            }

            # Create DataFrame and scale
            input_df = pd.DataFrame(input_data)
            scaled_input = scaler.transform(input_df)

            # Predict
            prediction = model.predict(scaled_input)
            probability = model.predict_proba(scaled_input)[0][1]

            # Display results
            st.subheader("Prediction Result")
            result_color = "#FF4B4B" if prediction[0] == 1 else "#0068C9"
            st.markdown(f"**Prediction:** <span style='color:{result_color}; font-size:24px'>"
                        f"{'Heart Disease Detected' if prediction[0] == 1 else 'No Heart Disease'}</span>",
                        unsafe_allow_html=True)
            st.write(f"Probability of Heart Disease: {probability:.2%}")

        except FileNotFoundError:
            st.error("Please train the models first!")

if __name__ == "__main__":
    main()